# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      zip_code:
        description: 'Enter the zip code'
        required: true
        default: '76201'  # Default zip code for testing

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest
    env:  # Define global environment variables here
      OPENWEATHERMAPAPIKEY: ${{ secrets.OPENWEATHERMAPAPIKEY }}
      GEOCODEAPIKEY: ${{ secrets.GEOCODEAPIKEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pwd
        echo "start test"
        pytest --cov=weather_api --cov-report=html:docs/htmlcov tests/
        ls -la docs/htmlcov/
        git config --local user.email "github-actions@github.com"
        git config --local user.name "GitHub Actions"
        git add -f docs/htmlcov/*
        git status
        git commit -m "Add HTML coverage report" || echo "No changes to commit"
        git pull --rebase origin main  # Pull the latest changes to avoid conflicts
        git push
    - name: Run the Application
      run: |
        # Determine ZIP_CODE based on the event type (manual trigger or push/pull)
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ZIP_CODE="${{ github.event.inputs.zip_code }}"
        else
          ZIP_CODE="76201"  # Default zip code for push or pull_request
        fi
        python -m cmdli.cli weather --zip_code=$ZIP_CODE
        mv output.html docs/
    - name: Add output file to the repo
      run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git add docs/output.html
          git commit -m "Add output.html generated by CLI" || echo "No changes to commit"
          git pull --rebase origin main  # Pull the latest changes to avoid conflicts
          git push
    - name: Build Wheel File
      run: |
        python setup.py bdist_wheel
        git config --local user.email "github-actions@github.com"
        git config --local user.name "GitHub Actions"
        git add dist/*.whl
        git commit -m "Add wheel file generated by GitHub Actions" || echo "No changes to commit"
        git pull --rebase origin main  # Pull the latest changes to avoid conflicts
        git push   
        ls dist/  # List the contents

      

